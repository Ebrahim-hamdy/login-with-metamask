{"ast":null,"code":"\"use strict\";\n\nimport { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nconst Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n  try {\n    const comps = name.split(\".\");\n\n    for (let i = 0; i < comps.length; i++) {\n      if (nameprep(comps[i]).length === 0) {\n        throw new Error(\"empty\");\n      }\n    }\n\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function namehash(name) {\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid address - \" + String(name), \"name\", name);\n  }\n\n  let result = Zeros;\n\n  while (name.length) {\n    const partition = name.match(Partition);\n    const label = toUtf8Bytes(nameprep(partition[3]));\n    result = keccak256(concat([result, keccak256(label)]));\n    name = partition[2] || \"\";\n  }\n\n  return hexlify(result);\n}\nexport function id(text) {\n  return keccak256(toUtf8Bytes(text));\n}\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nexport function hashMessage(message) {\n  if (typeof message === \"string\") {\n    message = toUtf8Bytes(message);\n  }\n\n  return keccak256(concat([toUtf8Bytes(messagePrefix), toUtf8Bytes(String(message.length)), message]));\n}","map":{"version":3,"sources":["/Users/ebra/code/blockchain/tezos/login-with-metamask-demo/node_modules/@ethersproject/hash/lib.esm/index.js"],"names":["concat","hexlify","nameprep","toUtf8Bytes","keccak256","Logger","version","logger","Zeros","Uint8Array","Partition","RegExp","isValidName","name","comps","split","i","length","Error","error","namehash","throwArgumentError","String","result","partition","match","label","id","text","messagePrefix","hashMessage","message"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nconst Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n    try {\n        const comps = name.split(\".\");\n        for (let i = 0; i < comps.length; i++) {\n            if (nameprep(comps[i]).length === 0) {\n                throw new Error(\"empty\");\n            }\n        }\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nexport function namehash(name) {\n    if (typeof (name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address - \" + String(name), \"name\", name);\n    }\n    let result = Zeros;\n    while (name.length) {\n        const partition = name.match(Partition);\n        const label = toUtf8Bytes(nameprep(partition[3]));\n        result = keccak256(concat([result, keccak256(label)]));\n        name = partition[2] || \"\";\n    }\n    return hexlify(result);\n}\nexport function id(text) {\n    return keccak256(toUtf8Bytes(text));\n}\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nexport function hashMessage(message) {\n    if (typeof (message) === \"string\") {\n        message = toUtf8Bytes(message);\n    }\n    return keccak256(concat([\n        toUtf8Bytes(messagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n"]},"metadata":{},"sourceType":"module"}