{"ast":null,"code":"\"use strict\";\n\nimport { ec as EC } from \"elliptic\";\nimport { arrayify, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\n\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n\n  return _curve;\n}\n\nexport class SigningKey {\n  constructor(privateKey) {\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n\n  _addPoint(other) {\n    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n    const p1 = getCurve().keyFromPublic(arrayify(other));\n    return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n  }\n\n  signDigest(digest) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const signature = keyPair.sign(arrayify(digest), {\n      canonical: true\n    });\n    return splitSignature({\n      recoveryParam: signature.recoveryParam,\n      r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n      s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n    });\n  }\n\n  computeSharedSecret(otherKey) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n    return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n  }\n\n  static isSigningKey(value) {\n    return !!(value && value._isSigningKey);\n  }\n\n}\nexport function recoverPublicKey(digest, signature) {\n  const sig = splitSignature(signature);\n  const rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  const bytes = arrayify(key);\n\n  if (bytes.length === 32) {\n    const signingKey = new SigningKey(bytes);\n\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"sources":["/Users/ebra/code/blockchain/tezos/login-with-metamask-demo/node_modules/@ethersproject/signing-key/lib.esm/index.js"],"names":["ec","EC","arrayify","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","constructor","privateKey","keyPair","keyFromPrivate","getPublic","_addPoint","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","signDigest","digest","signature","sign","canonical","recoveryParam","r","toString","s","computeSharedSecret","otherKey","otherKeyPair","computePublicKey","derive","isSigningKey","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","length","signingKey","throwArgumentError"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { ec as EC } from \"elliptic\";\nimport { arrayify, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\nexport class SigningKey {\n    constructor(privateKey) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 = getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const signature = keyPair.sign(arrayify(digest), { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n}\nexport function recoverPublicKey(digest, signature) {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n    const bytes = arrayify(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n"]},"metadata":{},"sourceType":"module"}