{"ast":null,"code":"\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version); ///////////////////////////////\n\nexport var UnicodeNormalizationForm;\n\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n\n;\nexport var Utf8ErrorReason;\n\n(function (Utf8ErrorReason) {\n  // A continuation byte was present where there was nothing to continue\n  // - offset = the index the codepoint began in\n  Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\"; // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n  // - offset = the index the codepoint began in\n\n  Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\"; // The string is too short to process the expected codepoint\n  // - offset = the index the codepoint began in\n\n  Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\"; // A missing continuation byte was expected but not found\n  // - offset = the index the continuation byte was expected at\n\n  Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\"; // The computed code point is outside the range for UTF-8\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; outside the UTF-8 range\n\n  Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\"; // UTF-8 strings may not contain UTF-16 surrogate pairs\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n\n  Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\"; // The string is an overlong reperesentation\n  // - offset       = start of this codepoint\n  // - badCodepoint = the computed codepoint; already bounds checked\n\n  Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n\n;\n\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n  return logger.throwArgumentError(\"invalid codepoint at offset \".concat(offset, \"; \").concat(reason), \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n    let i = 0;\n\n    for (let o = offset + 1; o < bytes.length; o++) {\n      if (bytes[o] >> 6 !== 0x02) {\n        break;\n      }\n\n      i++;\n    }\n\n    return i;\n  } // This byte runs us past the end of the string, so just jump to the end\n  // (but the first byte was read already read and therefore skipped)\n\n\n  if (reason === Utf8ErrorReason.OVERRUN) {\n    return bytes.length - offset - 1;\n  } // Nothing to skip\n\n\n  return 0;\n}\n\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n  // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n  if (reason === Utf8ErrorReason.OVERLONG) {\n    output.push(badCodepoint);\n    return 0;\n  } // Put the replacement character into the output\n\n\n  output.push(0xfffd); // Otherwise, process as if ignoring errors\n\n  return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n} // Common error handing strategies\n\n\nexport const Utf8ErrorFuncs = Object.freeze({\n  error: errorFunc,\n  ignore: ignoreFunc,\n  replace: replaceFunc\n}); // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\nfunction getUtf8CodePoints(bytes, onError) {\n  if (onError == null) {\n    onError = Utf8ErrorFuncs.error;\n  }\n\n  bytes = arrayify(bytes);\n  const result = [];\n  let i = 0; // Invalid bytes are ignored\n\n  while (i < bytes.length) {\n    const c = bytes[i++]; // 0xxx xxxx\n\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    } // Multibyte; how many bytes left for this character?\n\n\n    let extraLength = null;\n    let overlongMask = null; // 110x xxxx 10xx xxxx\n\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n      } else {\n        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n      }\n\n      continue;\n    } // Do we have enough bytes in our data?\n\n\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n      continue;\n    } // Remove the length prefix from the char\n\n\n    let res = c & (1 << 8 - extraLength - 1) - 1;\n\n    for (let j = 0; j < extraLength; j++) {\n      let nextChar = bytes[i]; // Invalid continuation byte\n\n      if ((nextChar & 0xc0) != 0x80) {\n        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n        res = null;\n        break;\n      }\n\n      ;\n      res = res << 6 | nextChar & 0x3f;\n      i++;\n    } // See above loop for invalid contimuation byte\n\n\n    if (res === null) {\n      continue;\n    } // Maximum code point\n\n\n    if (res > 0x10ffff) {\n      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Reserved for UTF-16 surrogate halves\n\n\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n      continue;\n    } // Check for overlong sequences (more bytes than needed)\n\n\n    if (res <= overlongMask) {\n      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n} // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n  if (form != UnicodeNormalizationForm.current) {\n    logger.checkNormalize();\n    str = str.normalize(form);\n  }\n\n  let result = [];\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push(c >> 6 | 0xc0);\n      result.push(c & 0x3f | 0x80);\n    } else if ((c & 0xfc00) == 0xd800) {\n      i++;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new Error(\"invalid utf-8 string\");\n      } // Surrogate Pair\n\n\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push(pair >> 18 | 0xf0);\n      result.push(pair >> 12 & 0x3f | 0x80);\n      result.push(pair >> 6 & 0x3f | 0x80);\n      result.push(pair & 0x3f | 0x80);\n    } else {\n      result.push(c >> 12 | 0xe0);\n      result.push(c >> 6 & 0x3f | 0x80);\n      result.push(c & 0x3f | 0x80);\n    }\n  }\n\n  return arrayify(result);\n}\n;\n\nfunction escapeChar(value) {\n  const hex = \"0000\" + value.toString(16);\n  return \"\\\\u\" + hex.substring(hex.length - 4);\n}\n\nexport function _toEscapedUtf8String(bytes, onError) {\n  return '\"' + getUtf8CodePoints(bytes, onError).map(codePoint => {\n    if (codePoint < 256) {\n      switch (codePoint) {\n        case 8:\n          return \"\\\\b\";\n\n        case 9:\n          return \"\\\\t\";\n\n        case 10:\n          return \"\\\\n\";\n\n        case 13:\n          return \"\\\\r\";\n\n        case 34:\n          return \"\\\\\\\"\";\n\n        case 92:\n          return \"\\\\\\\\\";\n      }\n\n      if (codePoint >= 32 && codePoint < 127) {\n        return String.fromCharCode(codePoint);\n      }\n    }\n\n    if (codePoint <= 0xffff) {\n      return escapeChar(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n  return codePoints.map(codePoint => {\n    if (codePoint <= 0xffff) {\n      return String.fromCharCode(codePoint);\n    }\n\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n  }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n  return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n  return getUtf8CodePoints(toUtf8Bytes(str, form));\n}","map":{"version":3,"sources":["/Users/ebra/code/blockchain/tezos/login-with-metamask-demo/node_modules/@ethersproject/strings/lib.esm/utf8.js"],"names":["arrayify","Logger","version","logger","UnicodeNormalizationForm","Utf8ErrorReason","errorFunc","reason","offset","bytes","output","badCodepoint","throwArgumentError","ignoreFunc","BAD_PREFIX","UNEXPECTED_CONTINUE","i","o","length","OVERRUN","replaceFunc","OVERLONG","push","Utf8ErrorFuncs","Object","freeze","error","ignore","replace","getUtf8CodePoints","onError","result","c","extraLength","overlongMask","res","j","nextChar","MISSING_CONTINUE","OUT_OF_RANGE","UTF16_SURROGATE","toUtf8Bytes","str","form","current","checkNormalize","normalize","charCodeAt","c2","Error","pair","escapeChar","value","hex","toString","substring","_toEscapedUtf8String","map","codePoint","String","fromCharCode","join","_toUtf8String","codePoints","toUtf8String","toUtf8CodePoints"],"mappings":"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","sourcesContent":["\"use strict\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nexport var UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nexport var Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong reperesentation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = arrayify(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            }\n            else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid contimuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nexport function _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8: return \"\\\\b\";\n                case 9: return \"\\\\t\";\n                case 10: return \"\\\\n\";\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nexport function _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nexport function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n"]},"metadata":{},"sourceType":"module"}