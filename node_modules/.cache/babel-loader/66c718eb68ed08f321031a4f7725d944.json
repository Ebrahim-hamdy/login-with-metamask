{"ast":null,"code":"\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\n\nimport { BN } from \"bn.js\";\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\nexport class BigNumber {\n  constructor(constructorGuard, hex) {\n    logger.checkNew(new.target, BigNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n\n    return this;\n  }\n\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n\n  div(other) {\n    const o = BigNumber.from(other);\n\n    if (o.isZero()) {\n      throwFault(\"division by zero\", \"div\");\n    }\n\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n\n  mod(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"cannot modulo negative values\", \"mod\");\n    }\n\n    return toBigNumber(toBN(this).umod(value));\n  }\n\n  pow(other) {\n    return toBigNumber(toBN(this).pow(toBN(other)));\n  }\n\n  and(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'and' negative values\", \"and\");\n    }\n\n    return toBigNumber(toBN(this).and(value));\n  }\n\n  or(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'or' negative values\", \"or\");\n    }\n\n    return toBigNumber(toBN(this).or(value));\n  }\n\n  xor(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'xor' negative values\", \"xor\");\n    }\n\n    return toBigNumber(toBN(this).xor(value));\n  }\n\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot mask negative values\", \"mask\");\n    }\n\n    return toBigNumber(toBN(this).maskn(value));\n  }\n\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shl\");\n    }\n\n    return toBigNumber(toBN(this).shln(value));\n  }\n\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shr\");\n    }\n\n    return toBigNumber(toBN(this).shrn(value));\n  }\n\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n\n  isZero() {\n    return toBN(this).isZero();\n  }\n\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n\n    return null;\n  }\n\n  toString() {\n    // Lots of people expect this, which we do not support, so check\n    if (arguments.length !== 0) {\n      logger.throwError(\"bigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n    }\n\n    return toBN(this).toString(10);\n  }\n\n  toHexString() {\n    return this._hex;\n  }\n\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      if (value.match(/-?0x[0-9a-f]+/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n\n      return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n\n      return BigNumber.from(String(value));\n    }\n\n    if (typeof value === \"bigint\") {\n      return BigNumber.from(value.toString());\n    }\n\n    if (isBytes(value)) {\n      return BigNumber.from(hexlify(value));\n    }\n\n    if (value._hex && isHexString(value._hex)) {\n      return BigNumber.from(value._hex);\n    }\n\n    if (value.toHexString) {\n      value = value.toHexString();\n\n      if (typeof value === \"string\") {\n        return BigNumber.from(value);\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n\n} // Normalize the hex string\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have mulitple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}","map":{"version":3,"sources":["/Users/ebra/code/blockchain/tezos/login-with-metamask-demo/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"],"names":["BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","constructor","constructorGuard","hex","checkNew","new","target","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","fromTwos","toBigNumber","toBN","toTwos","abs","from","substring","add","other","sub","div","o","isZero","throwFault","mul","mod","isNeg","umod","pow","and","isNegative","or","xor","mask","maskn","shl","shln","shr","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","arguments","length","UNEXPECTED_ARGUMENT","toHexString","toHex","throwArgumentError","String","fault","params","NUMERIC_FAULT"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\nimport { BN } from \"bn.js\";\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        logger.checkNew(new.target, BigNumber);\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division by zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        return toBigNumber(toBN(this).pow(toBN(other)));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot mask negative values\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check\n        if (arguments.length !== 0) {\n            logger.throwError(\"bigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/-?0x[0-9a-f]+/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        if (typeof (value) === \"bigint\") {\n            return BigNumber.from(value.toString());\n        }\n        if (isBytes(value)) {\n            return BigNumber.from(hexlify(value));\n        }\n        if (value._hex && isHexString(value._hex)) {\n            return BigNumber.from(value._hex);\n        }\n        if (value.toHexString) {\n            value = value.toHexString();\n            if (typeof (value) === \"string\") {\n                return BigNumber.from(value);\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have mulitple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n"]},"metadata":{},"sourceType":"module"}