{"version":3,"sources":["App/workflow.jpg","Login/Login.tsx","Profile/Profile.tsx","App/App.tsx","index.tsx"],"names":["module","exports","web3","undefined","Login","React","Component","state","loading","handleAuthenticate","publicAddress","signature","fetch","process","body","JSON","stringify","headers","method","then","response","json","handleClick","a","onLoggedIn","props","window","ethereum","alert","enable","Web3","eth","getCoinbase","coinbase","toLowerCase","setState","users","length","handleSignup","handleSignMessage","catch","err","nonce","personal","sign","Error","render","this","className","onClick","Profile","user","username","handleChange","target","value","handleSubmit","accessToken","auth","id","Authorization","componentDidMount","jwtDecode","payload","onLoggedOut","seed","htmlFor","name","onChange","disabled","LS_KEY","App","handleLoggedIn","localStorage","setItem","handleLoggedOut","removeItem","ls","getItem","parse","src","logo","alt","style","height","dotEnvConfig","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ed2b199d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/workflow.5206274d.jpg\";","import './Login.css';\n\nimport React from 'react';\nimport Web3 from 'web3';\n\nimport { Auth } from '../types';\n\ninterface Props {\n  onLoggedIn: (auth: Auth) => void;\n}\n\nlet web3: Web3 | undefined = undefined; // Will hold the web3 instance\n\nexport class Login extends React.Component<Props> {\n  state = {\n    loading: false, // Loading button state\n  };\n\n  handleAuthenticate = ({\n    publicAddress,\n    signature,\n  }: {\n    publicAddress: string;\n    signature: string;\n  }) =>\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/auth`, {\n      body: JSON.stringify({ publicAddress, signature }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    }).then((response) => response.json());\n\n  handleClick = async () => {\n    const { onLoggedIn } = this.props;\n\n    // Check if MetaMask is installed\n    if (!(window as any).ethereum) {\n      window.alert('Please install MetaMask first.');\n      return;\n    }\n\n    if (!web3) {\n      try {\n        // Request account access if needed\n        await (window as any).ethereum.enable();\n\n        // We don't know window.web3 version, so we use our own instance of Web3\n        // with the injected provider given by MetaMask\n        web3 = new Web3((window as any).ethereum);\n      } catch (error) {\n        window.alert('You need to allow MetaMask.');\n        return;\n      }\n    }\n\n    const coinbase = await web3.eth.getCoinbase();\n    if (!coinbase) {\n      window.alert('Please activate MetaMask first.');\n      return;\n    }\n\n    const publicAddress = coinbase.toLowerCase();\n    this.setState({ loading: true });\n\n    // Look if user with current publicAddress is already present on backend\n    fetch(\n      `${process.env.REACT_APP_BACKEND_URL}/users?publicAddress=${publicAddress}`\n    )\n      .then((response) => response.json())\n      // If yes, retrieve it. If no, create it.\n      .then((users) =>\n        users.length ? users[0] : this.handleSignup(publicAddress)\n      )\n      // Popup MetaMask confirmation modal to sign message\n      .then(this.handleSignMessage)\n      // Send signature to backend on the /auth route\n      .then(this.handleAuthenticate)\n      // Pass accessToken back to parent component (to save it in localStorage)\n      .then(onLoggedIn)\n      .catch((err) => {\n        window.alert(err);\n        this.setState({ loading: false });\n      });\n  };\n\n  handleSignMessage = async ({\n    publicAddress,\n    nonce,\n  }: {\n    publicAddress: string;\n    nonce: string;\n  }) => {\n    try {\n      const signature = await web3!.eth.personal.sign(\n        `I am signing my one-time nonce: ${nonce}`,\n        publicAddress,\n        '' // MetaMask will ignore the password argument here\n      );\n\n      return { publicAddress, signature };\n    } catch (err) {\n      throw new Error('You need to sign the message to be able to log in.');\n    }\n  };\n\n  handleSignup = (publicAddress: string) => {\n    return fetch(`${process.env.REACT_APP_BACKEND_URL}/users`, {\n      body: JSON.stringify({ publicAddress }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    }).then((response) => response.json());\n  };\n\n  render() {\n    const { loading } = this.state;\n    return (\n      <div>\n        <button className=\"Login-button Login-mm\" onClick={this.handleClick}>\n          {loading ? 'Loading...' : 'Login with MetaMask'}\n        </button>\n      </div>\n    );\n  }\n}\n","import './Profile.css';\n\nimport jwtDecode from 'jwt-decode';\nimport React from 'react';\nimport Blockies from 'react-blockies';\n\nimport { Auth } from '../types';\n\ninterface Props {\n  auth: Auth;\n  onLoggedOut: () => void;\n}\n\ninterface State {\n  loading: boolean;\n  user?: {\n    id: number;\n    username: string;\n  };\n  username: string;\n}\n\nexport class Profile extends React.Component<Props, State> {\n  state: State = {\n    loading: false,\n    user: undefined,\n    username: '',\n  };\n\n  componentDidMount() {\n    const {\n      auth: { accessToken },\n    } = this.props;\n    const {\n      payload: { id },\n    } = jwtDecode(accessToken);\n\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/users/${id}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((user) => this.setState({ user }))\n      .catch(window.alert);\n  }\n\n  handleChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ username: value });\n  };\n\n  handleSubmit = () => {\n    const {\n      auth: { accessToken },\n    } = this.props;\n    const { user, username } = this.state;\n\n    this.setState({ loading: true });\n\n    if (!user) {\n      window.alert(\n        'The user id has not been fetched yet. Please try again in 5 seconds.'\n      );\n      return;\n    }\n\n    fetch(`${process.env.REACT_APP_BACKEND_URL}/users/${user.id}`, {\n      body: JSON.stringify({ username }),\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'PATCH',\n    })\n      .then((response) => response.json())\n      .then((user) => this.setState({ loading: false, user }))\n      .catch((err) => {\n        window.alert(err);\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    const {\n      auth: { accessToken },\n      onLoggedOut,\n    } = this.props;\n    const {\n      payload: { publicAddress },\n    } = jwtDecode(accessToken);\n    const { loading, user } = this.state;\n\n    const username = user && user.username;\n\n    return (\n      <div className=\"Profile\">\n        <p>\n          Logged in as <Blockies seed={publicAddress} />\n        </p>\n        <div>\n          My username is {username ? <pre>{username}</pre> : 'not set.'} My\n          publicAddress is <pre>{publicAddress}</pre>\n        </div>\n        <div>\n          <label htmlFor=\"username\">Change username: </label>\n          <input name=\"username\" onChange={this.handleChange} />\n          <button disabled={loading} onClick={this.handleSubmit}>\n            Submit\n          </button>\n        </div>\n        <p>\n          <button onClick={onLoggedOut}>Logout</button>\n        </p>\n      </div>\n    );\n  }\n}\n","import './App.css';\n\nimport React from 'react';\n\nimport { Login } from '../Login';\nimport { Profile } from '../Profile/Profile';\nimport { Auth } from '../types';\n// import logo from './logo.svg';\nimport logo from './workflow.jpg';\n\nconst LS_KEY = 'login-with-metamask:auth';\n\ninterface State {\n  auth?: Auth;\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {};\n\n  componentDidMount() {\n    // Access token is stored in localstorage\n    const ls = window.localStorage.getItem(LS_KEY);\n    const auth = ls && JSON.parse(ls);\n    this.setState({\n      auth,\n    });\n  }\n\n  handleLoggedIn = (auth: Auth) => {\n    localStorage.setItem(LS_KEY, JSON.stringify(auth));\n    this.setState({ auth });\n  };\n\n  handleLoggedOut = () => {\n    localStorage.removeItem(LS_KEY);\n    this.setState({ auth: undefined });\n  };\n\n  render() {\n    const { auth } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img\n            src={logo}\n            // className=\"App-logo\"\n            alt=\"logo\"\n            style={{ height: '95%' }}\n          />\n          <h1 className=\"App-title\">Welcome to Login with MetaMask Demo</h1>\n        </header>\n        <div className=\"App-intro\">\n          {auth ? (\n            <Profile auth={auth} onLoggedOut={this.handleLoggedOut} />\n          ) : (\n            <Login onLoggedIn={this.handleLoggedIn} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import './index.css';\n\nimport { config as dotEnvConfig } from 'dotenv';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\n// Load ENV variables\ndotEnvConfig({\n  path:\n    process.env.NODE_ENV === 'production'\n      ? '.env.production'\n      : '.env.development',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}